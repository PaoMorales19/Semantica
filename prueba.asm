;Archivo: Prueba.cpp
;Fecha: 08/11/2022 01:36:46 p. m.
#make_COME
#include emu8086.inc
ORG 1000h
;Variables: 
	area dd ?
	radio dd ?
	pi dd ?
	resultado dd ?
	a dw ?
	d dw ?
	altura dw ?
	cinco dw ?
	x dd ?
	y db ?
	i dw ?
	j dw ?
	k dw ?
PRINTN ""Introduce la altura de la piramide: ""
CALL SCAN_NUM
MOV altura, Cx
MOV AX, altura
PUSH AX
MOV AX, 2
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE if1
for0:
MOV AX, altura
PUSH AX
POP AX
MOV i, AX 
MOV AX, i
PUSH AX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE 
MOV AX, 0
PUSH AX
POP AX
MOV j, AX 
while1 :
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile1
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if2
PRINTN ""*""
PRINTN ""-""
if2:
MOV AX, 1
PUSH AX
JMP while1
finWhile1:
PRINTN ""\n""
MOV AX, i
PUSH AX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE 
MOV AX, 0
PUSH AX
POP AX
MOV j, AX 
while3 :
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile3
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if3
PRINTN ""*""
PRINTN ""-""
if3:
MOV AX, 1
PUSH AX
JMP while3
finWhile3:
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile3
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if4
PRINTN ""*""
PRINTN ""-""
if4:
MOV AX, 1
PUSH AX
PRINTN ""\n""
MOV AX, i
PUSH AX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE 
MOV AX, 0
PUSH AX
POP AX
MOV j, AX 
while5 :
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile5
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if5
PRINTN ""*""
PRINTN ""-""
if5:
MOV AX, 1
PUSH AX
JMP while5
finWhile5:
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile5
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if6
PRINTN ""*""
PRINTN ""-""
if6:
MOV AX, 1
PUSH AX
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile5
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if7
PRINTN ""*""
PRINTN ""-""
if7:
MOV AX, 1
PUSH AX
PRINTN ""\n""
MOV AX, i
PUSH AX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE 
MOV AX, 0
PUSH AX
POP AX
MOV j, AX 
while7 :
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile7
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if8
PRINTN ""*""
PRINTN ""-""
if8:
MOV AX, 1
PUSH AX
JMP while7
finWhile7:
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile7
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if9
PRINTN ""*""
PRINTN ""-""
if9:
MOV AX, 1
PUSH AX
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile7
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if10
PRINTN ""*""
PRINTN ""-""
if10:
MOV AX, 1
PUSH AX
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile7
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if11
PRINTN ""*""
PRINTN ""-""
if11:
MOV AX, 1
PUSH AX
PRINTN ""\n""
MOV AX, i
PUSH AX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JLE 
MOV AX, 0
PUSH AX
POP AX
MOV j, AX 
while9 :
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile9
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if12
PRINTN ""*""
PRINTN ""-""
if12:
MOV AX, 1
PUSH AX
JMP while9
finWhile9:
MOV AX, j
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, i
PUSH AX
POP BX
POP AX
SUB AX, BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finWhile9
MOV AX, j
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
DIV BX
PUSH DX
MOV AX, 0
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if13
PRINTN ""*""
PRINTN ""-""
if13:
MOV AX, 1
PUSH AX
PRINTN ""\n""
finFor0:
MOV AX, 0
PUSH AX
POP AX
MOV k, AX 
Do1 :
PRINTN ""-""
MOV AX, 2
PUSH AX
MOV AX, k
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finDo1
JMP Do1
finDo1:
PRINTN ""-""
MOV AX, 2
PUSH AX
MOV AX, k
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finDo1
PRINTN ""-""
MOV AX, 2
PUSH AX
MOV AX, k
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finDo1
PRINTN ""-""
MOV AX, 2
PUSH AX
MOV AX, k
PUSH AX
MOV AX, altura
PUSH AX
MOV AX, 2
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP AX
POP BX
CMP AX, BX
JGE finDo1
PRINTN ""\n""
PRINTN ""\nError: la altura debe de ser mayor que 2\n""
if1:
MOV AX, 1
PUSH AX
MOV AX, 1
PUSH AX
POP AX
POP BX
CMP AX, BX
JE if14
PRINTN ""Esto no se debe imprimir""
MOV AX, 2
PUSH AX
MOV AX, 2
PUSH AX
POP AX
POP BX
CMP AX, BX
JNE if15
PRINTN ""Esto tampoco""
if15:
if14:
MOV AX, 258
PUSH AX
POP AX
MOV a, AX 
PRINTN ""Valor de variable int 'a' antes del casteo: ""
MOV AX, a
PUSH AX
POP AX
MOV AX, a
PUSH AX
POP AX
POP AX
MOV y, AX 
PRINTN ""\nValor de variable char 'y' despues del casteo de a: ""
MOV AX, y
PUSH AX
POP AX
PRINTN ""\nA continuacion se intenta asignar un int a un char sin usar casteo: \n""
RET
END
DEFINE_SCAN_NUM
